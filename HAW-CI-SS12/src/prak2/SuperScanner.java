/* The following code was generated by JFlex 1.4.3 on 06.05.12 17:38 */

package prak2;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 03.05.12 15:12 from the specification file
 * <tt>D:/Eclipse/WorkSpace/CI2/src/prak2/Scanner.flex</tt>
 */
public class SuperScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\32\2\0\1\1\22\0\1\1\1\0\1\31\1\45"+
    "\4\0\1\33\1\34\1\36\1\35\1\52\1\37\1\51\1\40\12\2"+
    "\1\41\1\50\1\43\1\42\1\44\2\0\1\13\1\4\1\23\1\11"+
    "\1\5\1\26\1\6\1\15\1\7\2\3\1\16\1\30\1\10\1\24"+
    "\1\17\1\3\1\12\1\25\1\20\1\21\1\27\1\14\1\3\1\22"+
    "\1\3\1\46\1\0\1\47\3\0\1\13\1\4\1\23\1\11\1\5"+
    "\1\26\1\6\1\15\1\7\2\3\1\16\1\30\1\10\1\24\1\17"+
    "\1\3\1\12\1\25\1\20\1\21\1\27\1\14\1\3\1\22\1\3"+
    "\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\1\3\17\4\1\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\3\4"+
    "\1\26\1\27\10\4\1\30\2\4\1\0\1\31\1\0"+
    "\1\32\1\33\1\34\1\4\1\35\14\4\1\36\1\4"+
    "\1\31\1\4\1\37\1\4\1\40\6\4\1\41\1\42"+
    "\3\4\1\43\1\44\2\4\1\45\1\46\1\47\1\4"+
    "\1\50\1\51\1\4\1\52\1\53\1\4\1\54\2\4"+
    "\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285"+
    "\0\u02b0\0\u02db\0\u0306\0\u0331\0\53\0\53\0\53\0\53"+
    "\0\53\0\53\0\53\0\u035c\0\53\0\u0387\0\u03b2\0\53"+
    "\0\53\0\53\0\53\0\53\0\53\0\u03dd\0\u0408\0\u0433"+
    "\0\254\0\254\0\u045e\0\u0489\0\u04b4\0\u04df\0\u050a\0\u0535"+
    "\0\u0560\0\u058b\0\254\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0637"+
    "\0\53\0\53\0\53\0\u0662\0\254\0\u068d\0\u06b8\0\u06e3"+
    "\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b"+
    "\0\u0866\0\254\0\u0891\0\u060c\0\u08bc\0\254\0\u08e7\0\254"+
    "\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be\0\u09e9\0\254\0\254"+
    "\0\u0a14\0\u0a3f\0\u0a6a\0\254\0\254\0\u0a95\0\u0ac0\0\254"+
    "\0\254\0\254\0\u0aeb\0\254\0\254\0\u0b16\0\254\0\254"+
    "\0\u0b41\0\254\0\u0b6c\0\u0b97\0\254";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\5\1\10"+
    "\1\5\1\11\1\12\1\13\1\14\2\5\1\15\1\16"+
    "\1\17\1\5\1\20\1\21\2\5\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\54\0\1\3\53\0\1\4\51\0\30\5\23\0"+
    "\4\5\1\46\23\5\23\0\7\5\1\47\5\5\1\50"+
    "\12\5\23\0\25\5\1\51\2\5\23\0\23\5\1\52"+
    "\4\5\23\0\4\5\1\53\23\5\23\0\11\5\1\54"+
    "\16\5\23\0\14\5\1\55\13\5\23\0\11\5\1\56"+
    "\16\5\23\0\14\5\1\57\4\5\1\60\6\5\23\0"+
    "\7\5\1\61\20\5\23\0\23\5\1\62\4\5\23\0"+
    "\25\5\1\63\2\5\23\0\12\5\1\64\15\5\23\0"+
    "\23\5\1\65\4\5\22\0\31\66\1\67\1\70\20\66"+
    "\42\0\1\71\52\0\1\72\52\0\1\73\11\0\5\5"+
    "\1\74\22\5\23\0\10\5\1\75\17\5\23\0\24\5"+
    "\1\76\3\5\23\0\12\5\1\77\3\5\1\100\3\5"+
    "\1\101\5\5\23\0\11\5\1\102\16\5\23\0\6\5"+
    "\1\103\21\5\23\0\6\5\1\104\14\5\1\105\4\5"+
    "\23\0\4\5\1\106\23\5\23\0\16\5\1\107\11\5"+
    "\23\0\17\5\1\110\10\5\23\0\7\5\1\111\20\5"+
    "\23\0\11\5\1\112\16\5\23\0\10\5\1\113\17\5"+
    "\22\0\31\66\1\114\74\66\1\0\6\5\1\115\21\5"+
    "\23\0\4\5\1\116\1\5\1\117\21\5\23\0\10\5"+
    "\1\120\17\5\23\0\4\5\1\121\23\5\23\0\23\5"+
    "\1\122\4\5\23\0\12\5\1\123\15\5\23\0\15\5"+
    "\1\124\12\5\23\0\7\5\1\125\20\5\23\0\22\5"+
    "\1\126\5\5\23\0\7\5\1\127\20\5\23\0\4\5"+
    "\1\130\23\5\23\0\6\5\1\131\21\5\23\0\24\5"+
    "\1\132\3\5\23\0\20\5\1\133\7\5\23\0\7\5"+
    "\1\134\20\5\23\0\25\5\1\135\2\5\23\0\12\5"+
    "\1\136\15\5\23\0\11\5\1\137\16\5\23\0\21\5"+
    "\1\140\6\5\23\0\4\5\1\141\23\5\23\0\17\5"+
    "\1\142\10\5\23\0\4\5\1\143\23\5\23\0\15\5"+
    "\1\144\12\5\23\0\17\5\1\145\10\5\23\0\15\5"+
    "\1\146\12\5\23\0\17\5\1\147\10\5\23\0\10\5"+
    "\1\150\17\5\23\0\10\5\1\151\17\5\23\0\4\5"+
    "\1\152\23\5\23\0\20\5\1\153\7\5\23\0\11\5"+
    "\1\154\16\5\23\0\4\5\1\155\23\5\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3010];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\22\1\7\11\1\1\1\11\2\1\6\11"+
    "\20\1\1\0\1\1\1\0\3\11\62\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  public static int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  public static int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	
	public static final int whitespace 	= 256;
	public static final int ident 		= 257;
	public static final int intconst	= 258;
	public static final int lpar		= 259;
	public static final int rpar		= 260;
	public static final int addop		= 261;
	public static final int subop		= 262;
	public static final int multop		= 263;
	public static final int divop		= 264;
	public static final int beginsy		= 268;
	public static final int endsy		= 269;
	public static final int decl		= 270;
	public static final int equal		= 271;
	public static final int read		= 272;
	public static final int whilee		= 273;
	public static final int untill		= 274;
	public static final int repeatt		= 275;
	public static final int array		= 276;
	public static final int record		= 277;
	public static final int constt		= 278;
	public static final int type		= 279;
	public static final int of			= 280;
	public static final int doo			= 281;
	public static final int iff			= 282;
	public static final int thenn		= 283;
	public static final int elsif		= 284;
	public static final int elsee		= 285;
	public static final int printt		= 286;
	public static final int var			= 287;
	public static final int procedure	= 288;
	public static final int module		= 289;
	public static final int less		= 290;
	public static final int greater		= 291;
	public static final int sharp		= 292;
	public static final int double_dot	= 293;
	public static final int lsquarebraket	= 294;
	public static final int rsquarebraket	= 295;
	public static final int semicolon	= 296;
	public static final int dot			= 297;
	public static final int comma		= 298;
	public static final int less_equal		= 299;
	public static final int greater_equal = 300;
	public static final int string		= 301;
	
	
	public static final int errorsy		= 255;
	public static int intval; 
	public static String strval;
	
	public static int line = 1;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SuperScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SuperScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { return errorsy;
          }
        case 46: break;
        case 30: 
          { return var;
          }
        case 47: break;
        case 31: 
          { return elsee;
          }
        case 48: break;
        case 22: 
          { return iff;
          }
        case 49: break;
        case 15: 
          { return greater;
          }
        case 50: break;
        case 28: 
          { return greater_equal;
          }
        case 51: break;
        case 10: 
          { return subop;
          }
        case 52: break;
        case 35: 
          { return beginsy;
          }
        case 53: break;
        case 21: 
          { return comma;
          }
        case 54: break;
        case 17: 
          { return lsquarebraket;
          }
        case 55: break;
        case 45: 
          { return procedure;
          }
        case 56: break;
        case 33: 
          { return thenn;
          }
        case 57: break;
        case 24: 
          { return of;
          }
        case 58: break;
        case 29: 
          { return endsy;
          }
        case 59: break;
        case 1: 
          { return whitespace;
          }
        case 60: break;
        case 39: 
          { return printt;
          }
        case 61: break;
        case 42: 
          { return repeatt;
          }
        case 62: break;
        case 36: 
          { return elsif;
          }
        case 63: break;
        case 8: 
          { return addop;
          }
        case 64: break;
        case 9: 
          { return multop;
          }
        case 65: break;
        case 41: 
          { return constt;
          }
        case 66: break;
        case 20: 
          { return dot;
          }
        case 67: break;
        case 12: 
          { return double_dot;
          }
        case 68: break;
        case 25: 
          { strval = new String(yytext());
										 return string;
          }
        case 69: break;
        case 18: 
          { return rsquarebraket;
          }
        case 70: break;
        case 6: 
          { return lpar;
          }
        case 71: break;
        case 34: 
          { return type;
          }
        case 72: break;
        case 27: 
          { return less_equal;
          }
        case 73: break;
        case 14: 
          { return less;
          }
        case 74: break;
        case 40: 
          { return untill;
          }
        case 75: break;
        case 13: 
          { return equal;
          }
        case 76: break;
        case 44: 
          { return module;
          }
        case 77: break;
        case 4: 
          { strval = new String(yytext());
				 return ident;
          }
        case 78: break;
        case 19: 
          { return semicolon;
          }
        case 79: break;
        case 11: 
          { return divop;
          }
        case 80: break;
        case 37: 
          { return array;
          }
        case 81: break;
        case 3: 
          { intval = Integer.parseInt(yytext());
             return intconst;
          }
        case 82: break;
        case 16: 
          { return sharp;
          }
        case 83: break;
        case 7: 
          { return rpar;
          }
        case 84: break;
        case 38: 
          { return whilee;
          }
        case 85: break;
        case 5: 
          { line=line+1;
          }
        case 86: break;
        case 26: 
          { return decl;
          }
        case 87: break;
        case 32: 
          { return read;
          }
        case 88: break;
        case 43: 
          { return record;
          }
        case 89: break;
        case 23: 
          { return doo;
          }
        case 90: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java SuperScanner <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        SuperScanner scanner = null;
        try {
          scanner = new SuperScanner( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
